import networkx as nx

# Create a directed graph
G = nx.DiGraph()

# Add nodes
nodes = ['S', 'A', 'B', 'C', 'D', 'E', 'G']
G.add_nodes_from(nodes)

# Add edges
edges = [
    ('S', 'A'), ('S', 'B'), ('A', 'D'), ('B', 'C'), ('C', 'E'), ('D', 'G'), ('B', 'A')
]
G.add_edges_from(edges)

# Find the first path from 'S' to 'G' using DFS
def find_path_dfs(graph, start, end, path=[]):
    path = path + [start]

    if start == end:
        return path

    for neighbor in graph.successors(start):
        if neighbor not in path:
            new_path = find_path_dfs(graph, neighbor, end, path)
            if new_path:
                return new_path

    return None

source = 'S'
goal = 'G'

# Find the first path using DFS
dfs_path = find_path_dfs(G, source, goal)

# Print the first path found using DFS
if dfs_path:
    print("DFS Path (first path found): " + " -> ".join(dfs_path))
else:
    print("No path found using DFS")
